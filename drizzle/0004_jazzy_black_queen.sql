CREATE TABLE IF NOT EXISTS "replier_blog_comment_like" (
	"comment_id" integer NOT NULL,
	"user_id" varchar(255) NOT NULL,
	"created_at" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT "replier_blog_comment_like_comment_id_user_id_pk" PRIMARY KEY("comment_id","user_id")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "replier_blog_comment" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "replier_blog_comment_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"post_id" integer NOT NULL,
	"parent_id" integer,
	"author_id" varchar(255),
	"author_name" varchar(100) NOT NULL,
	"author_email" varchar(255) NOT NULL,
	"author_website" varchar(500),
	"content" text NOT NULL,
	"status" varchar(20) DEFAULT 'pending' NOT NULL,
	"ip_address" varchar(45),
	"user_agent" text,
	"is_edited" boolean DEFAULT false,
	"edited_at" timestamp with time zone,
	"like_count" integer DEFAULT 0,
	"metadata" jsonb,
	"created_at" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
	"updated_at" timestamp with time zone
);
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_blog_comment_like" ADD CONSTRAINT "replier_blog_comment_like_comment_id_replier_blog_comment_id_fk" FOREIGN KEY ("comment_id") REFERENCES "public"."replier_blog_comment"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_blog_comment_like" ADD CONSTRAINT "replier_blog_comment_like_user_id_replier_user_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."replier_user"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_blog_comment" ADD CONSTRAINT "replier_blog_comment_post_id_replier_blog_post_id_fk" FOREIGN KEY ("post_id") REFERENCES "public"."replier_blog_post"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_blog_comment" ADD CONSTRAINT "replier_blog_comment_parent_id_replier_blog_comment_id_fk" FOREIGN KEY ("parent_id") REFERENCES "public"."replier_blog_comment"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "replier_blog_comment" ADD CONSTRAINT "replier_blog_comment_author_id_replier_user_id_fk" FOREIGN KEY ("author_id") REFERENCES "public"."replier_user"("id") ON DELETE set null ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "blog_comment_like_comment_idx" ON "replier_blog_comment_like" USING btree ("comment_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "blog_comment_like_user_idx" ON "replier_blog_comment_like" USING btree ("user_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "blog_comment_post_idx" ON "replier_blog_comment" USING btree ("post_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "blog_comment_parent_idx" ON "replier_blog_comment" USING btree ("parent_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "blog_comment_author_idx" ON "replier_blog_comment" USING btree ("author_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "blog_comment_status_idx" ON "replier_blog_comment" USING btree ("status");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "blog_comment_created_at_idx" ON "replier_blog_comment" USING btree ("created_at");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "blog_comment_email_idx" ON "replier_blog_comment" USING btree ("author_email");